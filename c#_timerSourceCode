using System;
using System.Collections.Generic;

using Grasshopper.Kernel;
using Rhino.Geometry;

using System.IO;
using System.Linq;
using System.Data;
using System.Drawing;
using System.Reflection;
using System.Windows.Forms;
using System.Xml;
using System.Xml.Linq;
using System.Runtime.InteropServices;

using Rhino.DocObjects;
using Rhino.Collections;
using GH_IO;
using GH_IO.Serialization;
using GH_IO.Types;
using System.Timers;



// In order to load the result of this wizard, you will also need to
// add the output bin/ folder of this project to the list of loaded
// folder in Grasshopper.
// You can use the _GrasshopperDeveloperSettings Rhino command for that.

namespace cs_IOSerialization
{
    public class csIOSerializationComponent : GH_Component
    {
        System.Timers.Timer aTimer = new System.Timers.Timer();
        bool toggle_SS = false;
        bool toggle_Reset = false;
        double interNumber = 1000;
        int testNumber = 0;

        /// <summary>
        /// Each implementation of GH_Component must provide a public 
        /// constructor without any arguments.
        /// Category represents the Tab in which the component will appear, 
        /// Subcategory the panel. If you use non-existing tab or panel names, 
        /// new tabs/panels will automatically be created.
        /// </summary>
        public csIOSerializationComponent()
          : base("cs_IOSerialization", "Timer",
              "Description",
              "Category", "Subcategory")
        {
            aTimer.Interval = interNumber;
            aTimer.Elapsed += new ElapsedEventHandler(OnTimedEvent);

        }

        /// <summary>
        /// Registers all the input parameters for this component.
        /// </summary>
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            pManager.AddNumberParameter("interval", "interval", "interval", GH_ParamAccess.item);
            pManager.AddBooleanParameter("Start/Stop", "Start/Stop", "Start/Stop", GH_ParamAccess.item);
            pManager.AddBooleanParameter("Reset", "Reset", "Reset", GH_ParamAccess.item);
        }

        /// <summary>
        /// Registers all the output parameters for this component.
        /// </summary>
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            pManager.AddNumberParameter("test", "test", "test", GH_ParamAccess.item);
        }
        /// <summary>
        /// This is the method that actually does the work.
        /// </summary>
        /// <param name="DA">The DA object can be used to retrieve data from input parameters and 
        /// to store data in output parameters.</param>
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            if (!DA.GetData(0, ref interNumber)) return;
            if (!DA.GetData(1, ref toggle_SS)) return;
            if (!DA.GetData(2, ref toggle_Reset)) return;

            if (toggle_SS && !aTimer.Enabled)
            {
                Start();
            }
            else if(aTimer.Enabled)
            {
                Stop();
            }

            if (toggle_Reset) Reset();

            DA.SetData("test", testNumber);

        }

        public void Start()
        {
            aTimer.Interval = interNumber;
            aTimer.Start();
        }
        public void Stop()
        {
            aTimer.Stop();
            ExpireSolution(true);
        }
        public void Reset()
        {
            testNumber = 0;
        }
        private void OnTimedEvent(Object source, ElapsedEventArgs e)
        {
            testNumber = testNumber + 1;
            ExpireSolution(true);
        }

        /// <summary>
        /// Provides an Icon for every component that will be visible in the User Interface.
        /// Icons need to be 24x24 pixels.
        /// </summary>
        protected override System.Drawing.Bitmap Icon
        {
            get
            {
                // You can add image files to your project resources and access them like this:
                //return Resources.IconForThisComponent;
                return null;
            }
        }

        /// <summary>
        /// Each component must have a unique Guid to identify it. 
        /// It is vital this Guid doesn't change otherwise old ghx files 
        /// that use the old ID will partially fail during loading.
        /// </summary>
        public override Guid ComponentGuid
        {
            get { return new Guid("81e6c550-ae87-4974-a4dc-5c666c8ec8c2"); }
        }
    }
}
